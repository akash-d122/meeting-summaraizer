/**
 * Email Service Configuration
 * 
 * Centralized configuration for email services including:
 * - Nodemailer with Gmail/SMTP
 * - SendGrid integration
 * - AWS SES support
 * - Email templates and settings
 */

const nodemailer = require('nodemailer');

// Email service configuration
const emailConfig = {
  // Primary service settings
  service: process.env.EMAIL_SERVICE || 'gmail',
  host: process.env.EMAIL_HOST || 'smtp.gmail.com',
  port: parseInt(process.env.EMAIL_PORT) || 587,
  secure: process.env.EMAIL_SECURE === 'true',
  
  // Authentication
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  },
  
  // From address settings
  from: {
    name: process.env.EMAIL_FROM_NAME || 'Meeting Summarizer',
    address: process.env.EMAIL_FROM_ADDRESS || process.env.EMAIL_USER
  },
  
  // Feature flags
  enabled: process.env.EMAIL_ENABLED !== 'false',
  rateLimit: parseInt(process.env.EMAIL_RATE_LIMIT) || 10,
  retryAttempts: parseInt(process.env.EMAIL_RETRY_ATTEMPTS) || 3,
  timeout: parseInt(process.env.EMAIL_TIMEOUT) || 30000,
  
  // Alternative services
  sendgrid: {
    apiKey: process.env.SENDGRID_API_KEY,
    fromEmail: process.env.SENDGRID_FROM_EMAIL
  },
  
  aws: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    region: process.env.AWS_REGION || 'us-east-1',
    fromEmail: process.env.AWS_SES_FROM_EMAIL
  }
};

// Nodemailer transporter instance
let transporter = null;

/**
 * Initialize email transporter
 */
function initializeTransporter() {
  if (!emailConfig.enabled) {
    console.log('üìß Email service disabled');
    return null;
  }

  if (!emailConfig.auth.user || !emailConfig.auth.pass) {
    console.warn('‚ö†Ô∏è Email credentials not configured');
    return null;
  }

  try {
    transporter = nodemailer.createTransport({
      service: emailConfig.service,
      host: emailConfig.host,
      port: emailConfig.port,
      secure: emailConfig.secure,
      auth: emailConfig.auth,
      timeout: emailConfig.timeout,
      pool: true, // Use connection pooling
      maxConnections: 5,
      maxMessages: 100,
      rateLimit: emailConfig.rateLimit
    });

    console.log('‚úÖ Email transporter initialized successfully');
    return transporter;
  } catch (error) {
    console.error('‚ùå Failed to initialize email transporter:', error);
    return null;
  }
}

/**
 * Verify email configuration
 */
async function verifyEmailConfig() {
  if (!transporter) {
    return { success: false, error: 'Email transporter not initialized' };
  }

  try {
    await transporter.verify();
    return { success: true, message: 'Email configuration verified' };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

/**
 * Get email transporter
 */
function getTransporter() {
  if (!transporter) {
    transporter = initializeTransporter();
  }
  return transporter;
}

/**
 * Get email configuration
 */
function getEmailConfig() {
  return {
    ...emailConfig,
    // Hide sensitive information
    auth: {
      user: emailConfig.auth.user,
      pass: emailConfig.auth.pass ? '***' : null
    }
  };
}

/**
 * Email template settings
 */
const templateConfig = {
  // Base template settings
  baseTemplate: {
    fontFamily: 'Arial, sans-serif',
    primaryColor: '#2c3e50',
    secondaryColor: '#3498db',
    backgroundColor: '#f8f9fa',
    borderColor: '#e9ecef'
  },
  
  // Summary email template
  summaryTemplate: {
    subject: 'Meeting Summary - {{summaryStyle}} ({{date}})',
    preheader: 'Your AI-generated meeting summary is ready',
    headerTitle: 'Meeting Summary',
    footerText: 'Generated by Meeting Summarizer AI'
  },
  
  // Notification template
  notificationTemplate: {
    subject: 'Meeting Summarizer Notification',
    preheader: 'Important update from Meeting Summarizer',
    headerTitle: 'Notification',
    footerText: 'Meeting Summarizer System'
  }
};

module.exports = {
  emailConfig,
  templateConfig,
  initializeTransporter,
  verifyEmailConfig,
  getTransporter,
  getEmailConfig
};
